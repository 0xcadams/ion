---
import type { Props } from '@astrojs/starlight/props'
import Default from '@astrojs/starlight/components/Hero.astro'
import config from '../../config';

const download = config.download;
const  slug = Astro.props.entry.slug;
---

{ slug !== "" &&
  <Default {...Astro.props}><slot /></Default>
}

{ slug === "" &&
<div class="lander">
  <div>
  <div class="command">
    <code>{download.curl}&nbsp;<span class="highlight">{download.url}</span>&nbsp;{download.bash}</code>
    <button
      title="Copy"
      class="copy"
      data-command={`${download.curl} ${download.url} ${download.bash}`}
    >
      <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 512 512"><rect width="336" height="336" x="128" y="128" fill="none" stroke="currentColor" stroke-linejoin="round" stroke-width="32" rx="57" ry="57"/><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" d="m383.5 128l.5-24a56.16 56.16 0 0 0-56-56H112a64.19 64.19 0 0 0-64 64v216a56.16 56.16 0 0 0 56 56h24"/></svg>
      <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24"><path fill="currentColor" d="M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z"/></svg>
    </button>
  </div>
  <div class="actions">
    <a href="/docs/">What is Ion</a>
    <a href="/docs/start/nextjs">Get Started</a>
  </div>
  </div>
</div>

<style>
	.lander {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0;
		height: calc(100vh
      - 2 * 1.5rem /* content-panel */
      - var(--sl-nav-height)
      - 3vh /* main */
      - 1.5rem /* sl-markdown-content */
    );
	}

  .command {
    font-size: 1.25rem;
    display: flex;
    align-items: center;
    gap: 1.25rem;
    justify-content: center;
    margin-bottom: 2rem;
  }

  .command code {
    color: var(--color-text-secondary);
  }
  .command code:before {
    content: '> ';
    opacity: 0.3;
    -webkit-user-select: none;
    user-select: none;
  }
  .command code .highlight {
    color: var(--color-text);
  }

  .command button {
    background: transparent;
    border: none;
    line-height: 1;
    padding: 0;
    height: 1.125rem;
    -webkit-user-select: none;
    user-select: none;
  }
  .command button svg {
    width: 1.125rem;
    height: 1.125rem;
    transition: color var(--color-transition);
  }
  .command button svg:first-child {
    transform: scaleX(-1);
    color: var(--color-text-dimmed);
  }
  .command button svg:last-child {
    color: var(--sl-color-accent);
    display: none;
  }
  .command button:hover svg:first-child {
    color: var(--color-text);
  }
  .command button.success {
    pointer-events: none;
    color: red;
  }
  .command button.success svg:first-child {
    display: none;
  }
  .command button.success svg:last-child {
    display: inline;
  }

	.actions {
    display: flex;
    gap: 3rem;
    align-items: center;
    justify-content: center;
    margin-bottom: 1rem;
	}
  .actions a {
    color: var(--sl-color-text-accent);
    text-underline-offset: 0.1875rem;
    text-decoration: none;
    font-family: var(--sl-font-mono);
    font-weight: 500;
  }
  .actions a:hover {
    text-decoration: underline;
  }

  @media (max-width: 30rem) {
    .command {
      font-size: 0.625rem;
      margin-bottom: 1.5rem;
    }
    .command button {
      display: none;
    }
  }
</style>

<script>
  const button = document.querySelector("button.copy");

  button.addEventListener("click", () => {
    console.log("copying");
    navigator.clipboard.writeText(button.dataset.command);
    button.classList.toggle("success");
    setTimeout(() => {
      button.classList.toggle("success");
    }, 1500);
  });
</script>
}
